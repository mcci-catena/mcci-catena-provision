/* ntddser.bri	Wed Aug  3 2016 22:04:32 tmm */

/*

Module:  ntddser.bri

Function:
	Definitions from ntddser.h

Version:
	V1.01a	Wed Aug  3 2016 22:04:32 tmm	Edit level 1

Copyright notice:
	This file copyright (C) 2016 by

		MCCI Corporation
		3520 Krums Corners Road
		Ithaca, NY  14850

	An unpublished work.  All rights reserved.
	
	This file is proprietary information, and may not be disclosed or
	copied without the prior permission of MCCI Corporation.
 
Author:
	Terry Moore, MCCI Corporation	August 2016

Revision history:
   1.01a  Wed Aug  3 2016 22:04:32  tmm
	Module created.

*/

local _Ntddser = {};

_Ntddser.cSERIALPERF_STATS = Lib.CreateStructureClass(
	.SERIALPERF_STATS,
	{
	{ .ULONG, .ReceivedCount },
	{ .ULONG, .TransmittedCount },
	{ .ULONG, .FrameErrorCount },
	{ .ULONG, .SerialOverrunErrorCount },
	{ .ULONG, .BufferOverrunErrorCount },
	{ .ULONG, .ParityErrorCount },
	});

_Ntddser.cSERIALCONFIG = Lib.CreateStructureClass(
	.SERIALCONFIG,
	{
	{ .ULONG, .Size },
	{ .USHORT, .Version },
	{ .ULONG, .SubType },
	{ .ULONG, .ProvOffset },
	{ .ULONG, .ProviderSize },
	{ .UCHAR, .ProviderData, 64 },
	});

_Ntddser.cSERIAL_LINE_CONTROL = Lib.CreateStructureClass(
	.SERIAL_LINE_CONTROL,
	{
	{ .UCHAR,	.StopBits },
	{ .UCHAR,	.Parity },
	{ .UCHAR,	.WordLength },
	});

_Ntddser.cSERIAL_TIMEOUTS = Lib.CreateStructureClass(
	.SERIAL_TIMEOUTS,
	{
	{ .ULONG,	.ReadIntervalTimeout },
	{ .ULONG,	.ReadTotalTimeoutMultiplier },
	{ .ULONG,	.ReadTotalTimeoutConstant },
	{ .ULONG,	.WriteTotalTimeoutMultiplier },
	{ .ULONG,	.WriteTotalTimeoutConstant },
	});

_Ntddser.cSERIAL_QUEUE_SIZE = Lib.CreateStructureClass(
	.SERIAL_QUEUE_SIZE,
	{
	{ .ULONG,	.InSize	},
	{ .ULONG,	.OutSize },
	});

_Ntddser.cSERIAL_BAUD_RATE = Lib.CreateStructureClass(
	.SERIAL_BAUD_RAGE,
	{
	{ .ULONG,	.BaudRate },
	});

_Ntddser.cSERIAL_PURGE_ARG = Lib.CreateStructureClass(
	.SERIAL_PURGE_ARG,
	{
	{ .ULONG,	.PurgeFlags },
	});

_Ntddser.cSERIAL_CHARS = Lib.CreateStructureClass(
	.SERIAL_CHARS,
	{
	{ .UCHAR,	.EofChar },
	{ .UCHAR,	.ErrorChar },
	{ .UCHAR,	.BreakChar },
	{ .UCHAR,	.EventChar },
	{ .UCHAR,	.XonChar },
	{ .UCHAR,	.XoffChar },
	});

_Ntddser.cSERIAL_HANDFLOW = Lib.CreateStructureClass(
	.SERIAL_HANDFLOW,
	{
	{ .ULONG,	.ControlHandShake },
	{ .ULONG,	.FlowReplace },
	{ .LONG,	.XonLimit },
	{ .LONG,	.XoffLimit },
	});

_Ntddser.cSERIAL_STATUS = Lib.CreateStructureClass(
	.SERIAL_STATUS,
	{
	{ .ULONG,	.Errors },
	{ .ULONG,	.HoldReasons },
	{ .ULONG,	.AmountInInQueue },
	{ .ULONG,	.AmountInOutQueue },
	{ .BOOLEAN,	.EofReceived },
	{ .BOOLEAN,	.WaitForImmediate },
	});

_Ntddser.cSERIAL_COMMPROP = Lib.CreateStructureClass(
	.SERIAL_COMMPROP,
	{
	{ .USHORT,	.PacketLength },
	{ .USHORT,	.PacketVersion },
	{ .ULONG,	.ServiceMask },
	{ .ULONG,	.Reserved1 },
	{ .ULONG,	.MaxTxQueue },
	{ .ULONG,	.MaxRxQueue },
	{ .ULONG,	.MaxBaud },
	{ .ULONG,	.ProvSubType },
	{ .ULONG,	.ProvCapabilities },
	{ .ULONG,	.SettableParams },
	{ .ULONG,	.SettableBaud },
	{ .USHORT,	.SettableData },
	{ .USHORT,	.SettableStopParity },
	{ .ULONG,	.CurrentTxQueue },
	{ .ULONG,	.CurrentRxQueue },
	{ .ULONG,	.ProvSpec1 },
	{ .ULONG,	.ProvSpec2 },
	{ .USHORT,	.ProvChar, 64 },
	});

return _Ntddser;

/* end of ntddser.bri */
